name: Deploy to NPM

on:
  push:
    tags:
      - 'v*'
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
        - prerelease

jobs:
  deploy:
    name: Deploy to NPM
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '20.x'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install pnpm
      run: npm install -g pnpm
      
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test
      
    - name: Build package
      run: npm run build
      
    - name: Verify build
      run: |
        if [ ! -d "dist" ]; then
          echo "Build failed: dist directory not found"
          exit 1
        fi
        echo "Build verification successful"
        
    - name: Determine version strategy
      id: version-strategy
      run: |
        CURRENT_VERSION=$(npm pkg get version | tr -d '"')
        echo "Current version: $CURRENT_VERSION"
        
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # Manual deployment - bump version
          echo "Manual deployment with version bump: ${{ github.event.inputs.version_type }}"
          echo "should_bump=true" >> $GITHUB_OUTPUT
          echo "bump_type=${{ github.event.inputs.version_type }}" >> $GITHUB_OUTPUT
        elif startsWith(github.ref, 'refs/tags/v'); then
          # Tag-based deployment - extract version from tag
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "Tag-based deployment: $TAG_VERSION"
          echo "should_bump=false" >> $GITHUB_OUTPUT
          echo "tag_version=$TAG_VERSION" >> $GITHUB_OUTPUT
        else
          # Main branch deployment - auto bump patch
          echo "Main branch deployment - auto bump patch"
          echo "should_bump=true" >> $GITHUB_OUTPUT
          echo "bump_type=patch" >> $GITHUB_OUTPUT
        fi
        
    - name: Bump version
      if: steps.version-strategy.outputs.should_bump == 'true'
      run: |
        npm version ${{ steps.version-strategy.outputs.bump_type }} --no-git-tag-version
        NEW_VERSION=$(npm pkg get version | tr -d '"')
        echo "New version: $NEW_VERSION"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        
    - name: Set version for tag-based deployment
      if: steps.version-strategy.outputs.should_bump == 'false' && steps.version-strategy.outputs.tag_version
      run: |
        # Update package.json with tag version
        npm pkg set version="${{ steps.version-strategy.outputs.tag_version }}"
        echo "NEW_VERSION=${{ steps.version-strategy.outputs.tag_version }}" >> $GITHUB_ENV
        
    - name: Create release notes
      id: release-notes
      run: |
        VERSION=${{ env.NEW_VERSION }}
        
        echo "## What's Changed" > release_notes.md
        echo "" >> release_notes.md
        
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "### Commits since $LAST_TAG:" >> release_notes.md
          git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> release_notes.md
        else
          echo "### Recent commits:" >> release_notes.md
          git log --pretty=format:"- %s (%h)" -10 >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "### Package Details" >> release_notes.md
        echo "- **Version**: $VERSION" >> release_notes.md
        echo "- **Package Size**: $(du -sh dist | cut -f1)" >> release_notes.md
        echo "- **Files**: $(find dist -type f | wc -l)" >> release_notes.md
        
    - name: Publish to NPM
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Create Git Tag (for manual/main deployments)
      if: steps.version-strategy.outputs.should_bump == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json
        git commit -m "chore: bump version to ${{ env.NEW_VERSION }}"
        git tag -a "v${{ env.NEW_VERSION }}" -m "Release v${{ env.NEW_VERSION }}"
        git push origin HEAD:main
        git push origin "v${{ env.NEW_VERSION }}"
        
    - name: Create GitHub Release
      if: steps.version-strategy.outputs.should_bump == 'true' || startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.NEW_VERSION }}
        release_name: Release v${{ env.NEW_VERSION }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "‚úÖ Successfully deployed @adalat-ai/page-extension to NPM"
        echo "üì¶ Package: https://www.npmjs.com/package/@adalat-ai/page-extension"
        echo "üè∑Ô∏è  Version: ${{ env.NEW_VERSION }}"
        
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Deployment failed"
        echo "Please check the logs and try again"
